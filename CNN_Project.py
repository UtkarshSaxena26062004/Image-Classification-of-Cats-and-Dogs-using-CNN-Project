# -*- coding: utf-8 -*-
"""My_IBM_AI_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hparwUEYEVI0aqdefhwrGuIuyvnxCAH5
"""

#Project by "Utkarsh Saxena"
#Image Classification of Cats and Dogs using CNN

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/salader/dogs-vs-cats")

#Import lib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Deep learning
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout,BatchNormalization

train = "/content/dogs-vs-cats/train"
test = "/content/dogs-vs-cats/test"

#generators
train_ds = keras.utils.image_dataset_from_directory(
    directory = train,
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = test,
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

#Normalize
def process(image,label):
  image = tf.cast(image/255. ,tf.float32)
  return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

# Creating CNN Model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train_ds,epochs=3,validation_data = validation_ds)

#Plotting Accuracy

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

#Plotting Loss

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

import cv2
# Predicted Class- 1 for Dog & 0 for Cat

test_img = cv2.imread('/content/dog.webp')

plt.imshow(test_img)

test_img.shape

test_img = cv2.resize(test_img,(256,256))

test_input = test_img.reshape((1,256,256,3))

model.predict(test_input)

test_img2 = cv2.imread('/content/cat.jpg')

plt.imshow(test_img2)

test_img2.shape

test_img2 = cv2.resize(test_img2,(256,256))

test_input2 = test_img2.reshape((1,256,256,3))

model.predict(test_input2)

from google.colab import files
from IPython.display import display, HTML, clear_output
import ipywidgets as widgets
import numpy as np
import matplotlib.pyplot as plt
import io
from PIL import Image as PILImage
import tensorflow as tf

# Custom CSS Styling
display(HTML('''
<style>
  .title { font-family: 'Segoe UI', sans-serif; color: #0F766E; font-size: 32px; font-weight: bold; }
  .subtitle { color: #555; font-size: 16px; font-family: 'Segoe UI'; margin-bottom: 20px; }
  .card {
    background: #F0FDFA;
    border-left: 5px solid #14B8A6;
    padding: 20px;
    margin-top: 20px;
    border-radius: 12px;
    font-family: 'Segoe UI';
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  .confidence-bar {
    height: 20px;
    background: #E0F2F1;
    border-radius: 10px;
    margin-top: 10px;
    overflow: hidden;
  }
  .confidence-fill {
    height: 100%;
    background: #10B981;
    text-align: right;
    color: white;
    padding-right: 8px;
    line-height: 20px;
    font-size: 14px;
    font-weight: bold;
    border-radius: 10px;
  }
</style>
'''))

# Title
display(HTML("<div class='title'>üêæ AI Dog vs Cat Classifier</div>"))
display(HTML("<div class='subtitle'>Upload a photo, click Predict, and see the AI guess with confidence!</div>"))

# Upload & Predict Widgets
upload_widget = widgets.FileUpload(accept='image/*', multiple=False)
predict_btn = widgets.Button(description="üöÄ Predict Now", button_style='success')
output_box = widgets.Output()

# UI Layout
ui = widgets.VBox([
    widgets.HTML("<b style='font-size:16px;'>üìÅ Step 1:</b> Upload an Image"),
    upload_widget,
    widgets.HTML("<b style='font-size:16px;'>ü§ñ Step 2:</b> Click Predict"),
    predict_btn,
    output_box
])
display(ui)

# Predict function
def on_predict_clicked(b):
    with output_box:
        clear_output()
        if not upload_widget.value:
            print("‚ö†Ô∏è Please upload an image.")
            return

        uploaded_file = list(upload_widget.value.values())[0]
        content = uploaded_file['content']
        img_pil = PILImage.open(io.BytesIO(content)).convert('RGB')
        img_resized = img_pil.resize((256, 256))
        img_array = np.array(img_resized)

        # Show uploaded image
        plt.imshow(img_array)
        plt.axis('off')
        plt.title("Uploaded Image")
        plt.show()

        # Prepare for prediction
        input_img = img_array.reshape((1, 256, 256, 3)).astype('float32') / 255.0
        pred = model.predict(input_img)[0][0]
        label = "üê∂ Dog" if pred >= 0.5 else "üê± Cat"
        confidence = pred if pred >= 0.5 else 1 - pred
        conf_percent = int(confidence * 100)

        # Display results in card
        display(HTML(f'''
            <div class='card'>
                <h3>Prediction: <span style="color: #10B981;">{label}</span></h3>
                <div class="confidence-bar">
                    <div class="confidence-fill" style="width:{conf_percent}%;">{conf_percent}%</div>
                </div>
            </div>
        '''))

# Bind button
predict_btn.on_click(on_predict_clicked)

model.save("cat_dog_model.h5")

model.save("cat_dog_model.keras")
